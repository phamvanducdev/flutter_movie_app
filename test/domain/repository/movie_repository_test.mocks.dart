// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_movie_app/test/domain/repository/movie_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_movie_app/data/dto/movie_dto.dart' as _i4;
import 'package:flutter_movie_app/data/dto/user_dto.dart' as _i6;
import 'package:flutter_movie_app/data/source/local/data_storage.dart' as _i5;
import 'package:flutter_movie_app/data/source/network/api_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.MovieDto>> fetchMovieList() => (super.noSuchMethod(
        Invocation.method(
          #fetchMovieList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.MovieDto>>.value(<_i4.MovieDto>[]),
      ) as _i3.Future<List<_i4.MovieDto>>);
}

/// A class which mocks [DataStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataStorage extends _i1.Mock implements _i5.DataStorage {
  MockDataStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveUserLogged(_i6.UserDto? userLogged) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserLogged,
          [userLogged],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i6.UserDto?> getUserLogged() => (super.noSuchMethod(
        Invocation.method(
          #getUserLogged,
          [],
        ),
        returnValue: _i3.Future<_i6.UserDto?>.value(),
      ) as _i3.Future<_i6.UserDto?>);

  @override
  _i3.Future<bool> removeUserLogged() => (super.noSuchMethod(
        Invocation.method(
          #removeUserLogged,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> saveMovieList(List<_i4.MovieDto>? movies) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMovieList,
          [movies],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.MovieDto>> getMovieList() => (super.noSuchMethod(
        Invocation.method(
          #getMovieList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.MovieDto>>.value(<_i4.MovieDto>[]),
      ) as _i3.Future<List<_i4.MovieDto>>);

  @override
  _i3.Future<List<_i4.MovieDto>> getMovieListSaved() => (super.noSuchMethod(
        Invocation.method(
          #getMovieListSaved,
          [],
        ),
        returnValue: _i3.Future<List<_i4.MovieDto>>.value(<_i4.MovieDto>[]),
      ) as _i3.Future<List<_i4.MovieDto>>);

  @override
  _i3.Future<bool> saveMovie(_i4.MovieDto? movie) => (super.noSuchMethod(
        Invocation.method(
          #saveMovie,
          [movie],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> unSaveMovie(String? movieId) => (super.noSuchMethod(
        Invocation.method(
          #unSaveMovie,
          [movieId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
